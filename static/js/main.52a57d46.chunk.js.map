{"version":3,"sources":["components/Node.js","App.js","serviceWorker.js","index.js"],"names":["Node","state","color","handleClick","setState","Konva","Util","getRandomColor","this","props","x","y","name","width","height","fill","value","stroke","label","onClick","fontSize","text","offsetX","offsetY","Component","App","nodes","event","target","getPointerPosition","push","key","length","className","window","innerWidth","innerHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAKqBA,E,4MACnBC,MAAQ,CACNC,MAAO,S,EAYTC,YAAc,WACZ,EAAKC,SAAS,CACZF,MAAOG,IAAMC,KAAKC,oB,uDAIZ,IAAD,EACgBC,KAAKC,MAApBC,EADD,EACCA,EAAGC,EADJ,EACIA,EAAGC,EADP,EACOA,KAEd,OACE,kBAAC,QAAD,CACEF,EAAGA,EACHC,EAAGA,GAEH,kBAAC,SAAD,CACEE,MAAO,GACPC,OAAQ,GACRC,KAAMP,KAAKP,MAAMC,MACjBc,MAAO,EACPC,OAAO,QACPC,MAAM,KACNC,QAASX,KAAKL,cAEhB,kBAAC,OAAD,CACEiB,SAAU,GACVC,KAAMT,EACNG,KAAK,QACLO,QAAS,EACTC,QAAS,S,GA1CeC,aCDbC,E,4MACnBxB,MAAQ,CACNyB,MAAO,I,EAGTvB,YAAc,SAAEwB,GAAY,IAAD,EACRA,EAAMC,OAAOC,qBAAtBnB,EADiB,EACjBA,EAAGC,EADc,EACdA,EACPe,EAAQ,EAAKzB,MAAMyB,MACvBA,EAAMI,KAAK,kBAAC,EAAD,CAAMC,IAAKL,EAAMM,OAAQtB,EAAGA,EAAGC,EAAGA,EAAGC,KAAMc,EAAMM,UAE5D,EAAK5B,SAAL,2BACK,EAAKH,OADV,IAEEyB,MAAOA,M,uDAMT,OACE,yBAAKO,UAAU,OACb,uDACA,kBAAC,QAAD,CAAOpB,MAAOqB,OAAOC,WAAYrB,OAAQoB,OAAOE,YAAajB,QAASX,KAAKL,aACzE,kBAAC,QAAD,KACIK,KAAKP,MAAMyB,a,GAvBQF,aCQba,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52a57d46.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Circle, Label, Text } from 'react-konva';\nimport Konva from 'konva';\n\nexport default class Node extends Component {\n  state = {\n    color: 'white'\n  };\n\n  static propTypes = {\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    name: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]).isRequired\n  };\n\n  handleClick = () => {\n    this.setState({\n      color: Konva.Util.getRandomColor()\n    });\n  };\n\n  render() {\n    const { x, y, name } = this.props;\n\n    return (\n      <Label\n        x={x}\n        y={y}\n      >\n        <Circle\n          width={50}\n          height={50}\n          fill={this.state.color}\n          value={1}\n          stroke=\"black\"\n          label=\"hi\"\n          onClick={this.handleClick}\n        />\n        <Text\n          fontSize={16}\n          text={name}\n          fill=\"black\"\n          offsetX={5}\n          offsetY={7}\n        />\n      </Label>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport Node from './components/Node';\n\nexport default class App extends Component {\n  state = {\n    nodes: []\n  };\n\n  handleClick = ( event ) => {\n    const { x, y } = event.target.getPointerPosition();\n    let nodes = this.state.nodes;\n    nodes.push(<Node key={nodes.length} x={x} y={y} name={nodes.length} />);\n\n    this.setState({\n      ...this.state,\n      nodes: nodes\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Click to create a node:</h1>\n        <Stage width={window.innerWidth} height={window.innerHeight} onClick={this.handleClick}>\n          <Layer>\n            { this.state.nodes }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}